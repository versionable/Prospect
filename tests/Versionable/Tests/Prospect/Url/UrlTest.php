<?php

namespace Versionable\Tests\Prospect\Url;

use Versionable\Prospect\Url\Url;

/**
 * Test class for Url.
 * Generated by PHPUnit on 2011-01-05 at 17:48:08.
 */
class UrlTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Url
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Url('http://testing.com/somepath', array('a' => 'b'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement test__toString().
     */
    public function test__toString()
    {
      $this->assertEquals($this->object->getUrl(), $this->object->__toString());
    }

    /**
     * @todo Implement testToString().
     */
    public function testToString()
    {
      $this->assertEquals($this->object->getUrl(), $this->object->toString());
    }

    /**
     * @todo Implement testGetUrl().
     */
    public function testGetUrl()
    {
      $this->assertEquals('http://testing.com/somepath?a=b', $this->object->getUrl());
    }

    /**
     * @todo Implement testSetUrl().
     */
    public function testSetUrl()
    {
      $url = 'http://example.com?b=c#top';
      $this->object->setUrl($url);
      $this->assertEquals($this->readAttribute($this->object, 'scheme'), 'http');
      $this->assertEquals($this->readAttribute($this->object, 'hostname'), 'example.com');
      $this->assertEquals($this->readAttribute($this->object, 'port'), 80);
    }

    public function testSetUrlInvalid()
    {
      $this->setExpectedException('\RuntimeException');

      $this->object->setUrl('notavalidurl');
    }

    public function testSetUrlWithOptions()
    {
      $url = 'http://testuser:testpass@example.com:8080?b=c';
      $this->object->setUrl($url);
      $this->assertEquals($this->readAttribute($this->object, 'scheme'), 'http');
      $this->assertEquals($this->readAttribute($this->object, 'hostname'), 'example.com');
      $this->assertEquals($this->readAttribute($this->object, 'port'), 8080);
      $this->assertEquals($this->readAttribute($this->object, 'username'), 'testuser');
      $this->assertEquals($this->readAttribute($this->object, 'password'), 'testpass');
      $parameters = $this->readAttribute($this->object, 'parameters');
      $this->assertEquals($parameters['b'], 'c');
    }

    /**
     * @todo Implement testSetParameters().
     */
    public function testSetParameters()
    {
      $parameters = array('id' => 1, 'name' => 'httpclient', 'page' => 2);
      $this->object->setParameters($parameters);
      $this->assertEquals($this->readAttribute($this->object, 'parameters'), $parameters);
    }

    /**
     * @todo Implement testGetParameters().
     */
    public function testGetParameters()
    {
      $this->assertEquals($this->readAttribute($this->object, 'parameters'), $this->object->getParameters());
    }

    /**
     * @todo Implement testGetParameter().
     */
    public function testGetParameter()
    {
      $this->object->setParameter('id', 1000);
      $parameters = $this->readAttribute($this->object, 'parameters');

      $this->assertEquals($parameters['id'], $this->object->getParameter('id'));
    }

    public function testGetParameterNotSet()
    {
      $this->assertEquals(null, $this->object->getParameter('thisdoesntexist'));
    }

    /**
     * @todo Implement testSetParameter().
     */
    public function testSetParameter()
    {
      $name = 'age';
      $value = '21';
      $this->object->setParameter($name, $value);
      $parameters = $this->readAttribute($this->object, 'parameters');

      $this->assertEquals($value, $parameters['age']);
    }

    /**
     * @todo Implement testHasParameter().
     */
    public function testHasParameter()
    {
      $parameters = $this->readAttribute($this->object, 'parameters');

      $this->assertEquals(isset($parameters['a']), $this->object->hasParameter('a'));
      $this->assertEquals(isset($parameters['doesntexist']), $this->object->hasParameter('doesntexist'));
    }

    /**
     * @todo Implement testSetHostname().
     */
    public function testSetHostname()
    {
      $hostname = 'example.com';
      $this->object->setHostname($hostname);
      $this->assertEquals($this->readAttribute($this->object, 'hostname'), $hostname);
    }

    /**
     * @todo Implement testGetHostname().
     */
    public function testGetHostname()
    {
      $this->assertEquals($this->readAttribute($this->object, 'hostname'), $this->object->getHostname());
    }

    /**
     * @todo Implement testSetScheme().
     */
    public function testSetScheme()
    {
      $scheme = 'https';
      $this->object->setScheme($scheme);
      $this->assertEquals($this->readAttribute($this->object, 'scheme'), $scheme);
      $this->assertEquals($this->readAttribute($this->object, 'port'), 443);
    }

    /**
     * @todo Implement testGetScheme().
     */
    public function testGetScheme()
    {
      $this->assertEquals($this->readAttribute($this->object, 'scheme'), $this->object->getScheme());
    }

    /**
     * @todo Implement testSetPort().
     */
    public function testSetPort()
    {
      $port = 8080;
      $this->object->setPort($port);
      $this->assertEquals($this->readAttribute($this->object, 'port'), $port);
    }

    /**
     * @todo Implement testGetPort().
     */
    public function testGetPort()
    {
      $this->assertEquals($this->readAttribute($this->object, 'port'), $this->object->getPort());
    }

    /**
     * @todo Implement testSetUsername().
     */
    public function testSetUsername()
    {
      $username = 'foobar';
      $this->object->setUsername($username);
      $this->assertEquals($this->readAttribute($this->object, 'username'), $username);
    }

    /**
     * @todo Implement testGetUsername().
     */
    public function testGetUsername()
    {
      $this->assertEquals($this->readAttribute($this->object, 'username'), $this->object->getUsername());
    }

    /**
     * @todo Implement testSetPassword().
     */
    public function testSetPassword()
    {
      $password = 'barfoo';
      $this->object->setPassword($password);
      $this->assertEquals($this->readAttribute($this->object, 'password'), $password);
    }

    /**
     * @todo Implement testGetPassword().
     */
    public function testGetPassword()
    {
      $this->assertEquals($this->readAttribute($this->object, 'password'), $this->object->getPassword());
    }

    /**
     * @todo Implement testSetPath().
     */
    public function testSetPath()
    {
      $path = '/foo/bar';
      $this->object->setPath($path);
      $this->assertEquals($this->readAttribute($this->object, 'path'), $path);
    }

    public function testSetPathEmpty()
    {
      $path = '';
      $this->object->setPath($path);
      $this->assertEquals($this->readAttribute($this->object, 'path'), '/');
    }

    /**
     * @todo Implement testGetPath().
     */
    public function testGetPath()
    {
      $this->assertEquals($this->readAttribute($this->object, 'path'), $this->object->getPath());
    }

    /**
     * @todo Implement testSetFragment().
     */
    public function testSetFragment()
    {
      $fragment = 'top';
      $this->object->setFragment($fragment);
      $this->assertEquals($this->readAttribute($this->object, 'fragment'), $fragment);
    }

    /**
     * @todo Implement testGetFragment().
     */
    public function testGetFragment()
    {
      $this->assertEquals($this->readAttribute($this->object, 'fragment'), $this->object->getFragment());
    }

    /**
     * @todo Implement testGetPathAndQuery().
     */
    public function testGetPathAndQuery()
    {

      $value = $this->readAttribute($this->object, 'path') . '?' . \http_build_query($this->readAttribute($this->object, 'parameters'));
      $this->assertEquals($value, $this->object->getPathAndQuery());
    }
}
?>
