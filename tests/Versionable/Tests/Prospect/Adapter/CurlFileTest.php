<?php

namespace Versionable\Prospect\Adapter;

use Versionable\Prospect\Adapter\CurlFile;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-12 at 11:49:49.
 */
class CurlFileTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var CurlFile
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new CurlFile;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function getTestFilePath($name)
    {
        return implode(DIRECTORY_SEPARATOR, array(dirname(__FILE__),'_files','CurlFileTest', $name));
    }

    /**
     * @covers Versionable\Prospect\Adapter\CurlFile::initialize
     */
    public function testInitialize()
    {
        $this->object->initialize();

        $this->assertAttributeInternalType('resource', 'handle', $this->object);
    }

    /**
     * @covers Versionable\Prospect\Adapter\CurlFile::call
     * @todo   Implement testCall().
     */
    public function testCall()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function createMockFile(array $methods = array())
    {
        return $this->getMock('Versionable\\Prospect\\Response\\File', $methods);
    }

    public function testCreateOutFile()
    {
        $test = $this->object;

        $mockFile = $this->createMockFile(array('getFilename'));
        $testFile = $this->getTestFilePath('test.file');
        $mockFile->expects($this->atLeastOnce())->method('getFilename')->will($this->returnValue($testFile));

        $test->createOutFile($mockFile);

        $this->assertFileExists($testFile);

        unlink($testFile);
    }

    public function testCreateOutFileNotWritable()
    {
        $test = $this->object;

        $mockFile = $this->createMockFile(array('getFilename'));
        $testFile = $this->getTestFilePath('readonly.file');
        $mockFile->expects($this->atLeastOnce())->method('getFilename')->will($this->returnValue($testFile));

        touch($testFile);
        chmod($testFile, 0444);

        $this->setExpectedException('Versionable\\Prospect\\Adapter\\Exception\\CurlFileException');

        $test->createOutFile($mockFile);

        $this->assertFileExists($testFile);
    }

    public function testCreateOutFileNoDir()
    {
        $test = $this->object;

        $mockFile = $this->createMockFile(array('getFilename'));
        $testFile =  implode(DIRECTORY_SEPARATOR, array(dirname(__FILE__),'_files','DontExist', 'testFile'));
        $mockFile->expects($this->atLeastOnce())->method('getFilename')->will($this->returnValue($testFile));

        $this->setExpectedException('Versionable\\Prospect\\Adapter\\Exception\\CurlFileException');

        $test->createOutFile($mockFile);

        $this->assertFileExists($testFile);
    }
}
