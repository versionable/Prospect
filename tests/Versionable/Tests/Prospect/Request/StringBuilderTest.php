<?php
namespace Versionable\Prospect\Request;

use Versionable\Prospect\Url\Url;
use Versionable\Prospect\Parameter\Parameter;
use Versionable\Prospect\File\File;

/**
 * Test class for StringBuilder.
 * Generated by PHPUnit on 2011-05-13 at 22:00:33.
 */
class StringBuilderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var StringBuilder
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new StringBuilder;

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testSetRequest().
     */
    public function testSetRequest()
    {   $request = new Request;
        $this->object->setRequest($request);
        
        $this->assertEquals($request, $this->readAttribute($this->object, 'request'));
    }

    /**
     * @todo Implement testSetBoundary().
     */
    public function testSetBoundary()
    {
        $boundary = 'theboundary';
        
        $this->object->setBoundary($boundary);
        
        $this->assertEquals($boundary, $this->readAttribute($this->object, 'boundary'));
    }

    /**
     * @todo Implement testGetBoundary().
     */
    public function testGetBoundary()
    {
        $this->assertEquals($this->readAttribute($this->object, 'boundary'), $this->object->getBoundary());
    }

    public function testToStringWithBody()
    {
        $request = new Request;
        $request->setUrl(new Url('http://www.versionable.co.uk'));
        $request->setMethod('POST');
        $request->setBody('testing body');
        $this->object->setRequest($request);
        
        $expected = file_get_contents(__DIR__ . '/../../../../data/request/request-with-body.txt');
        $this->assertEquals($expected, $this->object->toString());
    }
    
    public function testToStringWithParameters()
    {
        $request = new Request;
        $request->setUrl(new Url('http://www.versionable.co.uk'));
        $request->setMethod('POST');
        
        $request->getParameters()->add(new Parameter('name', 'prospect'));
        $request->getParameters()->add(new Parameter('blah', 'wah'));
        $this->object->setRequest($request);
        
        $expected = file_get_contents(__DIR__ . '/../../../../data/request/request-with-parameters.txt');
        $this->assertEquals($expected, $this->object->toString());
    }

    public function testToStringWithParameterAndBody()
    {
        $request = new Request;
        $request->setMethod('POST');
        $request->setUrl(new Url('http://www.versionable.co.uk'));
        $request->getParameters()->add(new Parameter('name', 'prospect'));

        $request->getFiles()->add(new File('file1', __DIR__ . '/../../../../data/file/file1.txt', 'text/plain'));
        $request->getFiles()->add(new File('file2', __DIR__ . '/../../../../data/file/file2.txt', 'text/plain'));
        
        $this->object->setRequest($request);
        
        $actual = $this->object->toString();
        
        $expected = str_replace('!boundary!',str_replace('-','', $this->object->getBoundary()), file_get_contents(__DIR__ . '/../../../../data/request/request-with-parameters-files.txt'));
        
        $this->assertEquals($expected, $actual);
    }
    
    public function testToStringNoRequestBody()
    {
        $request = new Request;
        $request->setUrl(new Url('http://www.versionable.co.uk'));
        $this->object->setRequest($request);
        
        $expected = file_get_contents(__DIR__ . '/../../../../data/request/request-get.txt');
        
        $this->assertEquals($expected, $this->object->toString());
    }
    
    public function testToStringNoUrl()
    {
        $this->setExpectedException('\RuntimeException');
        
        $request = new Request;
        
        $this->object->setRequest($request);
        
        $this->object->toString();
        
    }
    
    public function testWithCookies()
    {
        $request = new Request;
        $request->setUrl(new Url('http://www.versionable.co.uk'));
        $this->object->setRequest($request);
        
        $request->getCookies()->add(new \Versionable\Prospect\Cookie\Cookie('foo', 'bar'));
        
        $expected = file_get_contents(__DIR__ . '/../../../../data/request/request-with-cookie.txt');
        
        $this->assertEquals($expected, $this->object->toString());
    }

    public function test__toString()
    {
        $request = new Request;
        $request->setUrl(new Url('http://www.versionable.co.uk'));
        
        $this->object->setRequest($request);
        $this->assertEquals($this->object->toString(), (string)$this->object);
    }

}
